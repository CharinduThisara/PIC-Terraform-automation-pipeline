parameters:
  - name: TERRAFORM_VERSION # eg. :  1.8.1-1
    type: string
    default: "1.8.3-1"
  - name: AZCLIVERSION # eg. : 2.60.0
    type: string
    default: "2.60.0"
  - name: NOTIFY_EMAIL # eg. : abc@cde.com
    type: string
    default: "" # By default, it will not notify any email
  - name: TERRAFORM_DEPLOYMENT_REPO # please enter the same "repository name" as defined in the pipeline where this template is used
    type: string
  - name: AZURE_SERVICE_CONNECTION_NAME # this service connection should have access to the Azure Storage Account with Storage Blob Data owner role
    type: string
  - name: AZURE_STORAGE_ACCOUNT_NAME
    type: string
  - name: TFPLAN_CONTAINER_NAME # set the container name if you want to store the tfplan file in Azure Storage Account 
    type: string
    default: "" # By default, it will not store the tfplan file in Azure Storage Account
  - name: BACKEND_CONTAINER_NAME
    type: string
  - name: BACKEND_KEY # eg. : terraform
    type: string
    default: "terraform"

stages: 
- stage: TerraformPlanAndApply
  displayName: 'Terraform Deployment'
  jobs:
    - job: InstallingTerraformAndAzureCLI
      displayName: 'Install Terraform and Azure CLI'
      steps:
        - checkout: self
          path: terraform_conf
        - checkout: ${{ parameters.TERRAFORM_DEPLOYMENT_REPO }}
          path: terraform_deployment
        - script: |
            # Install or upgrade Terraform

            if command -v terraform &> /dev/null; then
                echo "Uninstalling existing Terraform version"
                sudo apt remove terraform -y
                sudo snap remove terraform
            fi

            echo "Installing/Upgrading Terraform to version ${{ parameters.TERRAFORM_VERSION }}"
            wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt-get update && sudo apt-get install terraform=${{ parameters.TERRAFORM_VERSION }} -y
          
            terraform --version
          displayName: 'Install/Upgrade Terraform'

        - script: |
            # Install or upgrade Azure CLI
            
            if command -v az &> /dev/null; then
                echo "Uninstalling existing Azure CLI version"
                sudo apt remove azure-cli -y
                sudo snap remove azure-cli
            fi

            echo "Installing/Upgrading Azure CLI to version $azCliVersion"
            sudo apt-get update
            sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release

            sudo mkdir -p /etc/apt/keyrings
            curl -sLS https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /etc/apt/keyrings/microsoft.gpg
            sudo chmod go+r /etc/apt/keyrings/microsoft.gpg

            # Obtain the currently installed distribution
            AZ_DIST=$(lsb_release -cs)

            # set sources list
            echo "Types: deb
            URIs: https://packages.microsoft.com/repos/azure-cli/
            Suites: ${AZ_DIST}
            Components: main
            Architectures: $(dpkg --print-architecture)
            Signed-by: /etc/apt/keyrings/microsoft.gpg" | sudo tee /etc/apt/sources.list.d/azure-cli.sources

            # Store an Azure CLI version of choice
            AZ_VER=${{ parameters.AZCLIVERSION }}

            sudo apt-get update

            # Install a specific version
            sudo apt-get install azure-cli=${AZ_VER}-1~${AZ_DIST} -y

            az --version
          displayName: 'Install/Upgrade Azure CLI'

        - task: AzureCLI@2
          displayName: 'Preparing Azure Credentials for terraform'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.AZURE_SERVICE_CONNECTION_NAME }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]${servicePrincipalId}"
              echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]${servicePrincipalKey}"
              echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;issecret=true]$(az account show --query 'id' -o tsv)"
              echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]${tenantId}"

        - script: |
            export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            export ARM_TENANT_ID=$(ARM_TENANT_ID)
            export ARM_USE_MSI=true
            export ARM_USE_AZUREAD=true

            ls $(Agent.BuildDirectory) -lah
            echo "-------------------"
            cd $(Agent.BuildDirectory)/terraform_deployment
            cp ../terraform_conf/* . -r
            ls -lah
            echo "-------------------"

            echo "Initializing Terraform"
            terraform init -backend-config="storage_account_name=${{ parameters.AZURE_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ parameters.BACKEND_CONTAINER_NAME }}" -backend-config="key=${{ parameters.BACKEND_KEY }}" 

            echo "Validating configuration"
            terraform validate

            terraform plan -input=false -out=tfplan > tfplan.txt

            echo "------------------------------------------------"
            echo "|               Terraform Plan                 |"
            echo "------------------------------------------------"
            cat tfplan.txt
            echo "------------------------------------------------"

            # if tfplan does not exist fail pipeline
            if [ ! -f tfplan ]; then
              echo "##vso[task.logissue type=error]Terraform plan failed. Please check the logs."
              exit 1
            fi

            # set variable for tfplan container name
            echo "##vso[task.setvariable variable=TFPLAN_CONTAINER_NAME;issecret=false]${{ parameters.TFPLAN_CONTAINER_NAME }}"

          displayName: 'Terraform Init and Plan and save the plan'
          
        - task: AzureCLI@2
          condition: and(ne(variables['TFPLAN_CONTAINER_NAME'], ''), succeeded())
          displayName: 'Upload tfplan to Azure Storage Account'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.AZURE_SERVICE_CONNECTION_NAME }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              az storage blob upload --account-name ${{ parameters.AZURE_STORAGE_ACCOUNT_NAME }} --container-name  ${{ parameters.TFPLAN_CONTAINER_NAME }} --file $(Agent.BuildDirectory)/terraform_deployment/tfplan --name $(Build.BuildId)-tfplan
              az storage blob upload --account-name ${{ parameters.AZURE_STORAGE_ACCOUNT_NAME }} --container-name  ${{ parameters.TFPLAN_CONTAINER_NAME }} --file $(Agent.BuildDirectory)/terraform_deployment/tfplan.txt --name $(Build.BuildId)-tfplan.txt

    - job: waitforValidation
      displayName: wait for deployment validation
      dependsOn: InstallingTerraformAndAzureCLI
      pool: server
      steps:
        - task: ManualValidation@0
          inputs:
            notifyUsers: |
              ${{ parameters.NOTIFY_EMAIL }}
            instructions: |
              'Review the Terraform plan printed to CLI in the previous pipeline job steps or you may access the tfplan through the configured Azure Storage Account'
    
    - job: TerraformApply
      displayName: 'Terraform Apply'
      dependsOn: waitforValidation
      steps:
        - checkout: ${{ parameters.TERRAFORM_DEPLOYMENT_REPO }}
          path: terraform_deployment

        - task: AzureCLI@2
          displayName: 'Preparing Azure Credentials for terraform & Downloading tfplan from Azure Storage Account'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.AZURE_SERVICE_CONNECTION_NAME }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]${servicePrincipalId}"
              echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]${servicePrincipalKey}"
              echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;issecret=true]$(az account show --query 'id' -o tsv)"
              echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]${tenantId}"

              # get the Azure storage account resource_group_name
              resource_group=$(az storage account show --name ${{ parameters.AZURE_STORAGE_ACCOUNT_NAME }} --query 'resourceGroup' -o tsv)
              echo "##vso[task.setvariable variable=BACKEND_RESOURCE_GROUP_NAME;issecret=false]$resource_group"

        - task: AzureCLI@2
          displayName: 'Creating a snapshot of tfstate file in Azure Storage Account'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.AZURE_SERVICE_CONNECTION_NAME }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              # Create a snapshot of the tfstate file
              az storage blob snapshot --account-name ${{ parameters.AZURE_STORAGE_ACCOUNT_NAME }} --container-name  ${{ parameters.BACKEND_CONTAINER_NAME }} --name ${{ parameters.BACKEND_KEY }} 

        - script: |
            export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            export ARM_TENANT_ID=$(ARM_TENANT_ID)
            export ARM_USE_MSI=true
            export ARM_USE_AZUREAD=true
            
            cd $(Agent.BuildDirectory)/terraform_deployment

            echo "Initializing Terraform"
            terraform init -backend-config="storage_account_name=${{ parameters.AZURE_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ parameters.BACKEND_CONTAINER_NAME }}" -backend-config="key=${{ parameters.BACKEND_KEY }}" 

            echo "Validating configuration"
            terraform validate

            # if tfplan does not exist fail pipeline
            if [ ! -f tfplan ]; then
              echo "##vso[task.logissue type=error]Terraform plan failed. Please check the logs."
              exit 1
            fi

            echo "Applying configuration"
            terraform apply -input=false tfplan 

            # set variable for tfplan container name
            echo "##vso[task.setvariable variable=TFPLAN_CONTAINER_NAME;issecret=false]${{ parameters.TFPLAN_CONTAINER_NAME }}"

          displayName: 'Terraform Init, Validate and apply the plan'
      
        - task: AzureCLI@2
          condition: and(ne(variables['TFPLAN_CONTAINER_NAME'], ''), succeeded())
          displayName: 'Delete tfplan from Azure Storage Account'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.AZURE_SERVICE_CONNECTION_NAME }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              az storage blob delete --account-name ${{ parameters.AZURE_STORAGE_ACCOUNT_NAME }} --container-name  ${{ parameters.TFPLAN_CONTAINER_NAME }} --name $(Build.BuildId)-tfplan
              az storage blob delete --account-name ${{ parameters.AZURE_STORAGE_ACCOUNT_NAME }} --container-name  ${{ parameters.TFPLAN_CONTAINER_NAME }} --name $(Build.BuildId)-tfplan.txt
