parameters:
  - name: TERRAFORM_VERSION
    type: string
    default: ""
  - name: AZCLIVERSION
    type: string
    default: ""
  - name: SERVICE_CONNECTION_NAME
    type: string
  - name: AZURE_STORAGE_ACCOUNT_NAME
    type: string
  - name: TFPLAN_CONTAINER_NAME
    type: string
  - name: TERRAFORM_DEPLOYMENT_REPO
    type: string
  - name: BACKEND_CONTAINER_NAME
    type: string
  - name: BACKEND_KEY
    type: string
  - name: BACKEND_RESOURCE_GROUP_NAME
    type: string
  - name: NOTIFY_EMAIL
    type: string
    default: ""

stages: 
- stage: TerraformPlanAndApply
  displayName: 'Terraform Deployment'
  jobs:
    - job: InstallingTerraformAndAzureCLI
      displayName: 'Install Terraform and Azure CLI'
      steps:
        - checkout: self
        - checkout: terraform_deployment
        - script: |
            # Install or upgrade Terraform
            if [[ -z "${{ parameters.TERRAFORM_VERSION }}" ]] && ! command -v terraform &> /dev/null; then
                echo "No specific Terraform version provided. Installing the latest version."
                sudo apt update && sudo apt install terraform

            elif [[ "$(terraform --version | head -1 | cut -d' ' -f2)" != "${{ parameters.TERRAFORM_VERSION }}" ]] && [[ -n "${{ parameters.TERRAFORM_VERSION }}" ]]; then

                if command -v terraform &> /dev/null; then
                    echo "Uninstalling existing Terraform version"
                    sudo apt remove terraform -y
                fi

                echo "Installing/Upgrading Terraform to version ${{ parameters.TERRAFORM_VERSION }}"
                wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
                echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
                sudo apt update && sudo apt install "terraform=${{ parameters.TERRAFORM_VERSION }}" -y
            else
                echo "Terraform is already installed and matches the required version." 
            fi
            terraform --version
          displayName: 'Install/Upgrade Terraform'

        - script: |
            # Install or upgrade Azure CLI
            if [[ -z "${{ parameters.AZCLIVERSION }}" ]] && ! command -v az &> /dev/null; then
                echo "No specific Azure CLI version provided. Installing the latest version."
                curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
            elif ! command -v az &> /dev/null || [[ "$(az --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)" != "$azCliVersion" ]] && [[ -n "${{ parameters.AZCLIVERSION }}" ]]; then

                if command -v az &> /dev/null; then
                    echo "Uninstalling existing Azure CLI version"
                    sudo apt remove azure-cli -y
                fi

                echo "Installing/Upgrading Azure CLI to version $azCliVersion"
                sudo apt-get update
                sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release

                sudo mkdir -p /etc/apt/keyrings
                curl -sLS https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /etc/apt/keyrings/microsoft.gpg
                sudo chmod go+r /etc/apt/keyrings/microsoft.gpg

                AZ_DIST=$(lsb_release -cs)
                echo "Types: deb
                URIs: https://packages.microsoft.com/repos/azure-cli/
                Suites: ${AZ_DIST}
                Components: main
                Architectures: $(dpkg --print-architecture)
                Signed-by: /etc/apt/keyrings/microsoft.gpg" | sudo tee /etc/apt/sources.list.d/azure-cli.sources

                # Obtain the currently installed distribution
                AZ_DIST=$(lsb_release -cs)

                # Store an Azure CLI version of choice
                AZ_VER=${{ parameters.AZCLIVERSION }}

                # Install a specific version
                sudo apt-get install azure-cli=${AZ_VER}-1~${AZ_DIST}

            else
                echo "Azure CLI is already installed and matches the required version."
            fi
            az --version
          displayName: 'Install/Upgrade Azure CLI'

        - task: AzureCLI@2
          displayName: 'Prepare Credentials'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.SERVICE_CONNECTION_NAME }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]${servicePrincipalId}"
              echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]${servicePrincipalKey}"
              echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;issecret=true]$(az account show --query 'id' -o tsv)"
              echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]${tenantId}"
              
        - script: |
            export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            export ARM_TENANT_ID=$(ARM_TENANT_ID)

            echo "-------------------"
            cd ${{ parameters.TERRAFORM_DEPLOYMENT_REPO }}
            cp ../terraform-conf/* .
            ls -lah
            echo "-------------------"

            echo "Initializing Terraform"
            terraform init -backend-config="storage_account_name=${{ parameters.AZURE_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ parameters.BACKEND_CONTAINER_NAME }}" -backend-config="key=${{ parameters.BACKEND_KEY }}" -backend-config="resource_group_name=${{ parameters.BACKEND_RESOURCE_GROUP_NAME }}" 
            
            echo "-------------------"
            ls -lah
            echo "-------------------"

            terraform plan -out=tfplan > tfplan.txt
            cat tfplan.txt
          displayName: 'Terraform Init and Plan and save the plan'
          
        - task: AzureCLI@2
          displayName: 'Upload tfplan to Azure Storage Account'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.SERVICE_CONNECTION_NAME }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              az storage blob upload --account-name ${{ parameters.AZURE_STORAGE_ACCOUNT_NAME }} --container-name  ${{ parameters.TFPLAN_CONTAINER_NAME }} --file $(System.DefaultWorkingDirectory)/${{ parameters.TERRAFORM_DEPLOYMENT_REPO }}/tfplan --name $(Build.BuildId)-tfplan
              az storage blob upload --account-name ${{ parameters.AZURE_STORAGE_ACCOUNT_NAME }} --container-name  ${{ parameters.TFPLAN_CONTAINER_NAME }} --file $(System.DefaultWorkingDirectory)/${{ parameters.TERRAFORM_DEPLOYMENT_REPO }}/tfplan.txt --name $(Build.BuildId)-tfplan.txt

    - job: waitforValidation
      displayName: wait for deployment validation
      dependsOn: InstallingTerraformAndAzureCLI
      pool: server
      steps:
        - task: ManualValidation@0
          inputs:
            notifyUsers: |
              ${{ parameters.NOTIFY_EMAIL }}
            instructions: |
              'Review the Terraform plan and confirm if you want to apply the changes.' 
    
    - job: TerraformApply
      displayName: 'Terraform Apply'
      dependsOn: waitforValidation
      steps:
        - checkout: self
        - checkout: terraform_deployment

        - task: AzureCLI@2
          displayName: 'Prepare Azure Credentials and Download tfplan'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.SERVICE_CONNECTION_NAME }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]${servicePrincipalId}"
              echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]${servicePrincipalKey}"
              echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;issecret=true]$(az account show --query 'id' -o tsv)"
              echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]${tenantId}"
              echo "-------------------"
              ls -la
              echo "-------------------"
              az storage blob download --account-name ${{ parameters.AZURE_STORAGE_ACCOUNT_NAME }} --container-name  ${{ parameters.TFPLAN_CONTAINER_NAME }} --name $(Build.BuildId)-tfplan --file $(System.DefaultWorkingDirectory)/${{ parameters.TERRAFORM_DEPLOYMENT_REPO }}/tfplan

        - task: AzureCLI@2
          displayName: 'Prepare Azure Credentials and Create a snapshot of the current state'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.SERVICE_CONNECTION_NAME }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              az storage blob snapshot --account-name ${{ parameters.AZURE_STORAGE_ACCOUNT_NAME }} --container-name  ${{ parameters.BACKEND_CONTAINER_NAME }} --name ${{ parameters.BACKEND_KEY }} 

        - script: |
            export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            export ARM_TENANT_ID=$(ARM_TENANT_ID)
            
            echo "-------------------"
            cd ${{ parameters.TERRAFORM_DEPLOYMENT_REPO }}
            cp ../terraform-conf/* .
            ls -lah
            echo "-------------------"

            echo "Initializing Terraform"
            terraform init -backend-config="storage_account_name=${{ parameters.AZURE_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ parameters.BACKEND_CONTAINER_NAME }}" -backend-config="key=${{ parameters.BACKEND_KEY }}" -backend-config="resource_group_name=${{ parameters.BACKEND_RESOURCE_GROUP_NAME }}"

            echo "Validating configuration"
            terraform validate

            echo "Applying configuration"
            terraform apply tfplan -input=false 
          displayName: 'Terraform Init, Validate and apply the plan'
      
        - task: AzureCLI@2
          displayName: 'Delete tfplan from Azure Storage Account'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.SERVICE_CONNECTION_NAME }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              az storage blob delete --account-name ${{ parameters.AZURE_STORAGE_ACCOUNT_NAME }} --container-name  ${{ parameters.TFPLAN_CONTAINER_NAME }} --name $(Build.BuildId)-tfplan
              az storage blob delete --account-name ${{ parameters.AZURE_STORAGE_ACCOUNT_NAME }} --container-name  ${{ parameters.TFPLAN_CONTAINER_NAME }} --name $(Build.BuildId)-tfplan.txt
