trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  build.clean: none

parameters:
  - name: terraform_repo_url
    type: string
    default: "https://github.com/CharinduThisara/terraform-basics"
  - name: service_connection_name
    type: string
    default: $(service_connection_name)

stages:
- stage: TerraformPlanAndApply
  displayName: 'Terraform Deployment'
  jobs:
    - job: InstallingTerraformAndAzureCLI
      displayName: 'Install Terraform and Azure CLI'
      steps:

        - script: |
            # install Terraform if not already installed
            if ! command -v terraform &> /dev/null
            then
                wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
                echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
                sudo apt update && sudo apt install terraform
            fi
            terraform --version
          displayName: 'Install Terraform'

        - script: |
            # install Azure CLI if not already installed
            if ! command -v az &> /dev/null
            then
                curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
            fi
            az --version
          displayName: 'Install Azure CLI'

        - task: AzureCLI@2
          displayName: 'Prepare Credentials'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.service_connection_name }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]${servicePrincipalId}"
              echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]${servicePrincipalKey}"
              echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;issecret=true]$(az account show --query 'id' -o tsv)"
              echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]${tenantId}"
              
        - script: |
            export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            export ARM_TENANT_ID=$(ARM_TENANT_ID)

            git clone ${{ parameters.terraform_repo_url }}
            cd terraform-basics
            terraform init
            terraform plan -out=tfplan
            # save the plan in jason format as a variable
            plan_json=$(terraform show -json tfplan)
            echo "##vso[task.setvariable variable=plan]$plan_json"
          displayName: 'Terraform Init and Plan and save the plan'
          
        - task: AzureCLI@2
          displayName: 'Upload tfplan to Azure Storage Account'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.service_connection_name }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              az storage blob upload --account-name charindutisurug --container-name terraform-automation-pipeline --file $(System.DefaultWorkingDirectory)/terraform-basics/tfplan --name $(Build.BuildId)-tfplan

        

    - job: waitforValidation
      displayName: wait for deployment validation
      dependsOn: InstallingTerraformAndAzureCLI
      pool: server
      steps:
        - task: ManualValidation@0
          inputs:
            notifyUsers: ''
            instructions: |
              'Review the Terraform plan and confirm if you want to apply the changes.'
    
    - job: TerraformApply
      displayName: 'Terraform Apply'
      dependsOn: waitforValidation
      steps:
        - script: |
            # clone git terraform_repo_url
            git clone ${{ parameters.terraform_repo_url }}
          displayName: 'Clone Terraform Repo'

        - task: AzureCLI@2
          displayName: 'Prepare Credentials'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.service_connection_name }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]${servicePrincipalId}"
              echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]${servicePrincipalKey}"
              echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;issecret=true]$(az account show --query 'id' -o tsv)"
              echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]${tenantId}"

              az storage blob download --account-name charindutisurug --container-name terraform-automation-pipeline --name $(Build.BuildId)-tfplan --file $(System.DefaultWorkingDirectory)/terraform-basics/tfplan

        - script: |
            # check difference between the plan and the current state
            cd terraform-basics
            terraform init
            echo "Validated plan"
            terraform show -json tfplan > tfplan.json
            cat tfplan.json
            echo "-----------------------------------"
            echo
          displayName: 'Terraform Plan Check'

        - script: |
            export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            export ARM_TENANT_ID=$(ARM_TENANT_ID)
            # Prompt for user input
            cd terraform-basics
            cat tfplan.json | tr -d '\n' | sed 's/}{/}\n{/g'
            # terraform apply tfplan
          displayName: 'Terraform Apply'
