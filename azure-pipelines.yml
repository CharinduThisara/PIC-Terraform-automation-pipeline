parameters:
  - name: service_connection_name
    type: string
  - name: azure_storage_account_name
    type: string
  - name: azure_storage_container_name
    type: string
  - name: terraform_deployment_repo
    type: string
  - name: backend_container_name
    type: string
  - name: key
    type: string
  - name: backend_resource_group_name
    type: string

stages: 
- stage: TerraformPlanAndApply
  displayName: 'Terraform Deployment'
  jobs:
    - job: InstallingTerraformAndAzureCLI
      displayName: 'Install Terraform and Azure CLI'
      steps:
        - checkout: self
        - checkout: terraform_deployment
        - script: |
            # install Terraform if not already installed
            if ! command -v terraform &> /dev/null
            then
                wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
                echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
                sudo apt update && sudo apt install terraform
            fi
            terraform --version
          displayName: 'Install Terraform'

        - script: |
            # install Azure CLI if not already installed
            if ! command -v az &> /dev/null
            then
                curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
            fi
            az --version
          displayName: 'Install Azure CLI'

        - task: AzureCLI@2
          displayName: 'Prepare Credentials'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.service_connection_name }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]${servicePrincipalId}"
              echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]${servicePrincipalKey}"
              echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;issecret=true]$(az account show --query 'id' -o tsv)"
              echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]${tenantId}"
              
        - script: |
            export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            export ARM_TENANT_ID=$(ARM_TENANT_ID)
            echo "-------------------"
            cd ${{ parameters.terraform_deployment_repo }}
            cp ../terraform-conf/* .
            ls -lah
            echo "-------------------"

            # If the backend container name, key and resource group name are not provided, use the configs in the terraform deployment repo

            terraform init -backend-config="storage_account_name=${{ parameters.azure_storage_account_name }}" -backend-config="container_name=${{ parameters.backend_container_name }}" -backend-config="key=${{ parameters.key }}" -backend-config="resource_group_name=${{ parameters.backend_resource_group_name }}" 
            
            echo "-------------------"
            ls -lah
            echo "-------------------"

            terraform plan -out=tfplan > tfplan.txt
            cat tfplan.txt
          displayName: 'Terraform Init and Plan and save the plan'
          
        - task: AzureCLI@2
          displayName: 'Upload tfplan to Azure Storage Account'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.service_connection_name }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              az storage blob upload --account-name ${{ parameters.azure_storage_account_name }} --container-name  ${{ parameters.azure_storage_container_name }} --file $(System.DefaultWorkingDirectory)/${{ parameters.terraform_deployment_repo }}/tfplan --name $(Build.BuildId)-tfplan
              az storage blob upload --account-name ${{ parameters.azure_storage_account_name }} --container-name  ${{ parameters.azure_storage_container_name }} --file $(System.DefaultWorkingDirectory)/${{ parameters.terraform_deployment_repo }}/tfplan.txt --name $(Build.BuildId)-tfplan.txt

    - job: waitforValidation
      displayName: wait for deployment validation
      dependsOn: InstallingTerraformAndAzureCLI
      pool: server
      steps:
        - task: ManualValidation@0
          inputs:
            notifyUsers: ''
            instructions: |
              'Review the Terraform plan and confirm if you want to apply the changes.' 
              '\n'
              'https://portal.azure.com/#view/Microsoft_Azure_Storage/BlobPropertiesBladeV2/storageAccountId/%2Fsubscriptions%2F38785beb-5019-4896-8679-3d41ddacc4b1%2FresourceGroups%2Frnd-charindut-isuru%2Fproviders%2FMicrosoft.Storage%2FstorageAccounts%2Fcharindutisurug/path/terraform-automation-pipeline'
    
    - job: TerraformApply
      displayName: 'Terraform Apply'
      dependsOn: waitforValidation
      steps:
        - checkout: self
        - checkout: terraform_deployment

        - task: AzureCLI@2
          displayName: 'Prepare Azure Credentials and Download tfplan'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.service_connection_name }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]${servicePrincipalId}"
              echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]${servicePrincipalKey}"
              echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;issecret=true]$(az account show --query 'id' -o tsv)"
              echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]${tenantId}"
              echo "-------------------"
              ls -la
              echo "-------------------"
              az storage blob download --account-name ${{ parameters.azure_storage_account_name }} --container-name  ${{ parameters.azure_storage_container_name }} --name $(Build.BuildId)-tfplan --file $(System.DefaultWorkingDirectory)/${{ parameters.terraform_deployment_repo }}/tfplan

        - script: |
            export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            export ARM_TENANT_ID=$(ARM_TENANT_ID)

            echo "-------------------"
            cd ${{ parameters.terraform_deployment_repo }}
            cp ../terraform-conf/* .
            ls -lah
            echo "-------------------"

            terraform init -backend-config="storage_account_name=${{ parameters.azure_storage_account_name }}" -backend-config="container_name=${{ parameters.backend_container_name }}" -backend-config="key=${{ parameters.key }}" -backend-config="resource_group_name=${{ parameters.backend_resource_group_name }}"

            echo "Validated plan"
            terraform show -json tfplan > tfplan.json
            cat tfplan.json
            echo "-----------------------------------"
            echo

          displayName: 'Terraform Plan Check'

        - script: |
            echo "##vso[task.setvariable variable=backend_container_name]${{ parameters.backend_container_name }}"
            echo "##vso[task.setvariable variable=key]${{ parameters.key }}"
            echo "##vso[task.setvariable variable=backend_resource_group_name]${{ parameters.backend_resource_group_name }}"
          displayName: 'Set parameters as variables'

        - task: AzureCLI@2
          displayName: 'Prepare Azure Credentials and Create a snapshot of the current state'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.service_connection_name }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              az storage blob snapshot --account-name ${{ parameters.azure_storage_account_name }} --container-name  ${{ parameters.backend_container_name }} --name ${{ parameters.key }} 

        - script: |
            export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            export ARM_TENANT_ID=$(ARM_TENANT_ID)
            cd ${{ parameters.terraform_deployment_repo }}
            # Prompt for user input
            cat tfplan.json | tr -d '\n' | sed 's/}{/}\n{/g'
            echo "Validating configuration"
            terraform validate
            terraform apply tfplan
          displayName: 'Terraform Apply'
      
        - task: AzureCLI@2
          displayName: 'Delete tfplan from Azure Storage Account'
          inputs:
            addSpnToEnvironment: true
            azureSubscription: ${{ parameters.service_connection_name }}
            scriptLocation: 'inlineScript'
            scriptType: 'bash'
            inlineScript: |
              az storage blob delete --account-name ${{ parameters.azure_storage_account_name }} --container-name  ${{ parameters.azure_storage_container_name }} --name $(Build.BuildId)-tfplan
              az storage blob delete --account-name ${{ parameters.azure_storage_account_name }} --container-name  ${{ parameters.azure_storage_container_name }} --name $(Build.BuildId)-tfplan.txt
